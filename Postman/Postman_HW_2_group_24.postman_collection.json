{
	"info": {
		"_postman_id": "3284fe2d-daf9-4177-b003-80e80319f15f",
		"name": "Postman_HW_2_group_24",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверить, что в body приходит правильный string\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}first",
					"host": [
						"{{url}}first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test('Test_if_name_response_equals_to_name_request_in_user_info_3 4.', function() {\r",
							"    pm.expect(jsonData.name).to.eql('Lena');\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test('Test_if_age_response_equals_to_age_request_in_user_info_3 5.', function() {\r",
							"    pm.expect(jsonData.age).to.eql('33');\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test('Test_if_salary_response_equals_to_salary_request_in_user_info_3 6.', function() {\r",
							"    pm.expect(jsonData.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"var reqData = request.data;\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test('Test_if_name_response_equals_to_name_request_in_user_info_3 8.', function() {\r",
							"    pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test('Test_if_age_response_equals_to_age_request_in_user_info_3 9.', function() {\r",
							"    pm.expect(jsonData.age).to.eql(reqData.age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test('Test_if_salary_response_equals_to_salary_request_in_user_info_3 10.', function() {\r",
							"    pm.expect(jsonData.salary).to.eql(+reqData.salary);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.salary);\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test('Test_if_u_salary_response_equals_to_u_salary_request_in_user_info_3 12.', function() {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(+reqData.salary*4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Lena",
							"type": "text"
						},
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_3",
					"host": [
						"{{url}}user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200 2.\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"var respData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"var reqData = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test('Test_if_name_response_equals_to_name_request_in_object_info_3 5.', function() {\r",
							"    pm.expect(respData.name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test('Test_if_age_response_equals_to_age_request_in_object_info_3 6.', function() {\r",
							"    pm.expect(respData.age).to.eql(reqData.age);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test('Test_if_salary_response_equals_to_salary_request_in_object_info_3 7.', function() {\r",
							"    pm.expect(respData.salary).to.eql(+reqData.salary);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(respData.family);\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test('Test_if_dog_has_name_in_object_info_3 9.', function() {\r",
							"    pm.expect(respData.family.pets.dog).to.hasOwnProperty(respData.family.pets.dog.name);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test('Test_if_dog_has_age_in_object_info_3 10.', function() {\r",
							"    pm.expect(respData.family.pets.dog).to.hasOwnProperty(respData.family.pets.dog.age);\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test('Test_if_dogs_name_is_Luky_in_object_info_3 11.', function() {\r",
							"    pm.expect(respData.family.pets.dog.name).to.hasOwnProperty('Luky');\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test('Test_if_dogs_age_is_4_in_object_info_3 12.', function() {\r",
							"    pm.expect(respData.family.pets.dog.name).to.hasOwnProperty(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_3?name=Lena&age=33&salary=1000",
					"host": [
						"{{url}}object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Lena"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"2. Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"var respData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"var reqData = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test('5. Test_name', function() {\r",
							"    pm.expect(respData.name).to.eql(reqData.name)\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test('6. Test_age', function() {\r",
							"    pm.expect(respData.age).to.eql(+reqData.age)\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log('7. Console.log_req_param_salary: ', reqData.salary);\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log('8. Console.log_resp_param_salary: ', respData.salary);\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log('9. Console.log_resp_param_salary[0]: ', respData.salary[0]);\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log('10. Console.log_resp_param_salary[1]: ', respData.salary[1]);\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log('11. Console.log_resp_param_salary[2]: ', respData.salary[2]);\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test('12. Check the [0] resp_param_salary', function() {\r",
							"    pm.expect(respData.salary[0]).to.eql(+reqData.salary)\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test('13. Check the [1] resp_param_salary*2', function() {\r",
							"    pm.expect(+respData.salary[1]).to.eql(+reqData.salary*2)\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test('14. Check the [2] resp_param_salary*3', function() {\r",
							"    pm.expect(+respData.salary[2]).to.eql(+reqData.salary*3)\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set('name', 'Lena');\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set('age', 33);\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set('salary', 1000);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (var i = 0; i <= respData.salary[i]; i = i + 1) {\r",
							"    console.log(+respData.salary[i])\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_4?name=Lena&age=33&salary=1000",
					"host": [
						"{{url}}object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Lena"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 5. Статус код 200\r",
							"pm.test(\"5. Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"var respData = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"var reqData = request.data;\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test('8. Check for start_qa_salary', function() {\r",
							"    pm.expect(respData).to.hasOwnProperty(respData.start_qa_salary)\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test('9. Check for qa_salary_after_6_months', function() {\r",
							"    pm.expect(respData).to.hasOwnProperty(respData.qa_salary_after_6_months)\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test('10. Check for qa_salary_after_12_months', function() {\r",
							"    pm.expect(respData).to.hasOwnProperty(respData.qa_salary_after_12_months)\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test('11. Check for qa_salary_after_1.5_year', function() {\r",
							"    pm.expect(respData).to.hasOwnProperty(respData[\"qa_salary_after_1.5_year\"])\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test('12.Check for qa_salary_after_3.5_years', function() {\r",
							"    pm.expect(respData).to.hasOwnProperty(respData[\"qa_salary_after_3.5_years\"])\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test('13. Check for person', function() {\r",
							"    pm.expect(respData).to.hasOwnProperty(respData.person)\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test('14. Check the start_qa_salary', function() {\r",
							"    pm.expect(respData.start_qa_salary).to.eql(+reqData.salary)\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test('15. Check the qa_salary_after_6_months', function() {\r",
							"    pm.expect(respData.qa_salary_after_6_months).to.eql(+reqData.salary*2)\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test('16. Check the qa_salary_after_12_months', function() {\r",
							"    pm.expect(respData.qa_salary_after_12_months).to.eql(+reqData.salary*2.7)\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test('17. Check the qa_salary_after_1.5_year', function() {\r",
							"    pm.expect(respData['qa_salary_after_1.5_year']).to.eql(+reqData.salary*3.3)\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test('18. Check the qa_salary_after_3.5_years', function() {\r",
							"    pm.expect(respData['qa_salary_after_3.5_years']).to.eql(+reqData.salary*3.8)\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test('19. Check the 1st u_name element - salary', function() {\r",
							"    pm.expect(respData.person.u_name[1]).to.eql(+reqData.salary)\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test('20. Check u_age', function() {\r",
							"    pm.expect(respData.person.u_age).to.eql(+reqData.age)\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test('21. Check u_salary_5_years', function() {\r",
							"    pm.expect(respData.person.u_salary_5_years).to.eql(+reqData.salary*4.2)\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"var it = [respData.person].entries();\r",
							"var entry;\r",
							"while (!(entry = it.next()).done) {\r",
							"    console.log(entry.value[1]);\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_2",
					"host": [
						"{{url}}user_info_2"
					]
				}
			},
			"response": []
		}
	]
}